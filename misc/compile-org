#!/usr/bin/env python3
import argparse
import sys
import tempfile
from subprocess import check_call
from pathlib import Path


# This is necessary because otherwise emacs loads default outdated org-mode (e.g. in /usr/share) in batch mode
def get_org_plus_path() -> Path:
    pp = Path('~/.emacs.d/elpa/').expanduser()
    matches = list(pp.glob('*/*/org-plus-contrib-*/'))
    assert len(matches) == 1
    return matches[0]


def filter_private(data: str) -> str:
    lines = [l for l in data.splitlines() if 'NOEXPORT' not in l]
    return '\n'.join(lines)


def main():
    p = argparse.ArgumentParser()
    p.add_argument('--test', action='store_true')
    args = p.parse_args()
    if args.test:
        org_data = """
#+OPTIONS: toc:2
#+OPTIONS: author:nil pri:t
#+OPTIONS: num:1

* what about that?
one [[sidenote:][testing sidenote]]

two



* Motivation
At some point in my life I realized I didn't remember most of the books/papers/posts/videos I had consumed few years before. [[sidenote:][For brevity I'll just refer to all of this as 'content' further on]]

"""
    else:
        org_data = sys.stdin.read()
    with tempfile.TemporaryDirectory() as td:
        td = Path(td)

        org_data = filter_private(org_data)

        inp_org  = td / 'input.org'
        inp_org.write_text(org_data)


        out_html = td / 'output.html'

        # TODO make sure it propagates errors properly...
        check_call([
            'emacs',
            '--kill',
            '--batch',
            '--directory', str(get_org_plus_path()),
            str(inp_org),
            '--eval', f'''(progn
; TODO ok, so maybe do not export CREATED property, but show it as a tooltip?
; TODO hmm. find another way to configure these...
; TODO use STRT?
(setq org-todo-keywords '((sequence "TODO" "START" "DONE")))

(defun org-export-deterministic-reference (references)
  (let ((new 0))
    (while (rassq new references) (setq new (+ new 1))) ; TODO shit, quadratic time! perhaps start with max??
    new))
(advice-add #'org-export-new-reference :override #'org-export-deterministic-reference)

(setq org-time-stamp-custom-formats
       '("[%Y-%m-%d]" . "[%Y-%m-%d %H:%M]"))

(setq org-display-custom-times 't)

; TODO give tags different colors depending on whether it actually exists or not?
(defun org-blog-tag (path desc fmt)
   (format "<a class='post-tag' href='./tags.html#%s'>#%s</a>" path path)
)
(org-add-link-type "tag" nil 'org-blog-tag)

(defun org-blog-sidenote (path desc fmt)
; TODO ugh. can't nest link inside the sidenote content??
; and writing that on elisp is gonna suck. really need python exporting backend...
; (message (format "HELLOO  =================== %s" desc))
   (format "<aside class='sidenote'>%s</aside>" desc)
)
(org-add-link-type "sidenote" nil 'org-blog-sidenote)


(org-html-export-as-html nil nil nil t)
; t is for BODY-ONLY
(write-file "{str(out_html)}")

            )'''
        ])

        html = out_html.read_text()

        from bs4 import BeautifulSoup
        soup = BeautifulSoup(html, 'lxml')
        # convert all
        # <p>text<aside>something<aside><pp>
        # to
        # <div><span>text</span><aside>something</aside></p>
        for aside in soup.find_all('aside'):
            parent = aside.parent
            assert parent.name == 'p'

            aside.extract()

            div = soup.new_tag('div')
            oldp = parent.replace_with(div)
            div.append(oldp)
            div.append(aside)
            oldp.name = 'span'
            oldp['class'] = oldp.get('class', []) + ['before-aside']

        html = str(soup)
        # patch up sidenotes now..

        sys.stdout.write(html)

if __name__ == '__main__':

    main()
