// NOTE: documents is provided externally (generated by a python script)

const BASE_URL = 'https://beepb00p.xyz/exobrain2'

// TODO put raw html here?
const key2doc = new Map()
const idx = lunr(function () {
  this.ref('key')
  this.field('text')

  this.metadataWhitelist = ['position']

  documents.forEach((doc) => {
      doc.key = doc.file + '#' + doc.id
      key2doc.set(doc.key, doc)
      this.add(doc)
  }, this)
})


const create = x => document.createElement(x)

const ready = () => {
    const query   = document.getElementById('query')
    const results = document.getElementById('results')
    const status  = document.getElementById('status')

    const dosearch = () => {
        const q = query.value
        const sres = idx.search(q)

        if (sres.length > 0) {
            status.textContent = `${sres.length} results`
            status.style.color = 'initial'
            results.textContent = '' // clear old results
        } else {
            status.textContent = `No results for: ${q}`
            status.style.color = 'red'
            // keeping old results
        }
        for (const r of sres) {
            const d = key2doc.get(r.ref)
            const text = d.text

            const etext = create('span')
            etext.classList.add('search-result-body')
            for ([k, v] of Object.entries(r.matchData.metadata)) {
                const poss = v.text.position
                let cpos = 0
                for (const [pos, len] of [...v.text.position, [text.length, 0]]) {
                    if (pos > cpos) {
                        etext.appendChild(document.createTextNode(text.substring(cpos, pos)))
                    }
                    if (len == 0) {
                        break
                    }
                    const npos = pos + len
                    const mark = create('mark')
                    mark.textContent = text.substring(pos, npos)
                    etext.appendChild(mark)
                    cpos = npos
                }
            }
            const el   = create('div')
            el.classList.add('search-result')
            const link = create('a')
            link.target= '_blank'
            link.classList.add('search-result-body')
            // TODO highlight the heading matched by id by exobrain css? maybe with animation or smth
            link.href = `${BASE_URL}/${d.file}#${d.id}`
            link.textContent = d.file
            el.appendChild(link)
            el.appendChild(etext)
            results.appendChild(el)
        }
    }

    /* todo could debounce but whatever */
    query.addEventListener('input', dosearch)
}

document.addEventListener('DOMContentLoaded', ready)
