#!/usr/bin/env python3
"""
Render referrers as a HTML table so I can see where my stuff is posted.
"""
from pathlib import Path

import pandas as pd # type: ignore

from process_logs import get_dataframe

# -1 for infinite
# TODO percentile??


less_prio = {
    'reddit.com',
    'lobste.rs',
    'news.ycombinator.com',
}

def run(*, access_log, exclude):
    excluded = set()
    if exclude is not None:
        res = {}
        exec(exclude.read_text(), res)
        excl = res['EXCLUDE']
        for e in excl:
            lines = e.splitlines()
            lines = (l.strip() for l in lines if len(l.strip()) > 0)
            excluded.update(lines)

    pd.set_option('display.max_colwidth', 200)

    df = get_dataframe(access_log)
    df = df[~df['error'].notnull()]

    # TODO filter reddit/hn somehow? or just sort to display in the bottom?
    boring_ref = (df['refferer'] == '-') | df['refferer'].str.contains('|'.join(excluded))
    # TODO dynamic sorting for pandas would be nice?
    rt = df[~boring_ref]
    rt = rt.sort_values(by=[
        # 'refferer',
        'dt',
    ], ascending=False)[[
        'dt',
        'url',
        'refferer',
    ]]
    gc = rt.groupby(['url', 'refferer']).count()
    gc = gc[gc['dt'] >= 5]
    gc = gc.sort_values(by=['dt'])
    return rt, gc


def main():
    import argparse
    p = argparse.ArgumentParser()
    p.add_argument('--access-log', type=Path, required=True)
    p.add_argument('--html', type=Path)
    p.add_argument('--exclude', type=Path)
    args = p.parse_args()
    html = args.html

    ref_table, gcount  = run(access_log=args.access_log, exclude=args.exclude)
    if html is not None:
        with html.open('w') as fo:
            fo.write('<script src="https://cdn.jsdelivr.net/npm/sorttable@1.0.2/sorttable.min.js"></script>')
            rt = ref_table.to_html().replace('class="dataframe"', 'class="dataframe sortable"')
            fo.write(rt)
            gc = gcount.to_html().replace('class="dataframe"', 'class="dataframe sortable"')
            fo.write(gc)
    else:
        print(ref_table)
        print(gcount)
    print(f"Total lines: {len(ref_table)}")


if __name__ == '__main__':
    main()
