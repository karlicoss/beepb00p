#!/usr/bin/env python3
"""
Render referrers as a HTML table so I can see where my stuff is posted.
"""
from datetime import timedelta
from itertools import islice
from pathlib import Path
import re
import sys
from time import sleep
from typing import Set, Dict, Any, Optional

import pandas as pd # type: ignore

from process_logs import get_dataframe, iter_log

# -1 for infinite
# TODO percentile??

from kython.klogging2 import LazyLogger

logger = LazyLogger('referrers', level='debug')


less_prio = {
    'reddit.com',
    'lobste.rs',
    'news.ycombinator.com',
    # TODO add other hn readers? or keep in external config
}

def run(*, access_log: Path, exclude: Optional[Path]=None, delta: Optional[timedelta]=None):
    excluded: Set[str] = set()
    if exclude is not None:
        res: Dict[str, Any] = {}
        exec(exclude.read_text(), res)
        excl = res['EXCLUDE']
        for e in excl:
            lines = e.splitlines()
            lines = (l.strip() for l in lines if len(l.strip()) > 0)
            excluded.update(lines)

    pd.set_option('display.max_colwidth', 200)

    # meh
    EXCLUDED_RE = re.compile('|'.join(e for e in excluded))

    def is_boring(row):
        url = row.get('url', None)
        if url is not None and url.startswith('/comments/'):
            # isso; whatever...
            return True

        # TODO filter reddit/hn somehow? or just sort to display in the bottom?
        ref = row.get('referrer', None)
        if ref is None:
            return False
        if ref == '-':
            return True
        if EXCLUDED_RE.search(ref):
            return True
        return False

    cols = ['dt', 'referrer', 'url']


    total = 0
    def it():
        nonlocal total
        for row in iter_log(access_log, columns=cols, delta=delta):
            total += 1
            if not is_boring(row):
                yield row

    df = pd.DataFrame(it(), columns=cols + ['error'])
    logger.info('dataframe: %d non-boring lines (total %d)', len(df), total)
    df = df[~df['error'].notemply()] # TODO not sure if makes more sense to filter straightaway...
    logger.info('after filtering errors: %d lines', len(df))

    # TODO dynamic sorting for pandas would be nice?
    df = df.sort_values(by=[
        # 'refferer',
        'dt',
    ], ascending=False)[[
        'dt',
        'url',
        'referrer',
    ]]
    gc = df.groupby(['url', 'referrer']).count()
    gc = gc[gc['dt'] >= 5]
    gc = gc.sort_values(by=['dt'])
    return df, gc


def main():
    import argparse
    p = argparse.ArgumentParser()
    p.add_argument('--access-log', type=Path, required=True)
    p.add_argument('--html', type=Path)
    p.add_argument('--exclude', type=Path)
    p.add_argument('--last', type=str, help='3d or 10h')
    args = p.parse_args()
    html = args.html

    # TODO fix last in crontabs
    # TODO ugh I'm sure there was smth default for it??

    lasts = args.last
    if lasts is None:
        delta = None
    else:
        if lasts.endswith('d'):
            delta = timedelta(days=int(lasts[:-1]))
        elif lasts.endswith('h'):
            delta = timedelta(hours=int(lasts[:-1]))
        else:
            raise RuntimeError(lasts)

    rt, gcount  = run(access_log=args.access_log, exclude=args.exclude, delta=delta)

    logger.info('rendering...')
    # TODO ugh. need some wort of iterative html rendering.. it takes 10% memeory as well
    if html is not None:
        with html.open('w') as fo:
            fo.write('<script src="https://cdn.jsdelivr.net/npm/sorttable@1.0.2/sorttable.min.js"></script>')

            rt['referrer'] = rt['referrer'].map(lambda u: f'<a href="{u}">{u}</a>')

            refs = rt['referrer'].value_counts()

            # print(refs.quantile(axis='columns')) # 0.1))
            q90 = refs.quantile(0.90)
            print(f'q90: {q90}')
            # TODO FIXME percentile??
            def style(ser):
                if ser.name != 'referrer':
                    return ['' for _ in ser]
                else:
                    return ['font-weight:bold' if refs[val] < q90 else ''  for _, val in ser.items()]


            rts = rt.style.apply(style).render()
            # rts = rt.to_html()
            # rts = rts.replace('class="dataframe"', 'class="dataframe sortable"')
            rts = rts.replace('<table ', '<table border=1 class="dataframe sortable"')
            fo.write(rts)
            gc = gcount.to_html().replace('class="dataframe"', 'class="dataframe sortable"')
            fo.write(gc)
            rf = refs.to_frame()
            rf = rf[rf.referrer > q90]
            print(rf)
            fo.write(rf.to_html())
    else:
        print(rt)
        print(gcount)
    logger.info('total lines: %d', len(rt))


if __name__ == '__main__':
    main()
