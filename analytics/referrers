#!/usr/bin/env python3
"""
Render referrers as a HTML table so I can see where my stuff is posted.
"""
from pathlib import Path
import re
import sys
from time import sleep

from typing import Set, Dict, Any

import pandas as pd # type: ignore

from process_logs import get_dataframe, iter_log

# -1 for infinite
# TODO percentile??

import logging
from kython.klogging import LazyLogger

logger = LazyLogger('referrers', level=logging.DEBUG)


less_prio = {
    'reddit.com',
    'lobste.rs',
    'news.ycombinator.com',
}

def run(*, access_log, exclude):
    excluded: Set[str] = set()
    if exclude is not None:
        res: Dict[str, Any] = {}
        exec(exclude.read_text(), res)
        excl = res['EXCLUDE']
        for e in excl:
            lines = e.splitlines()
            lines = (l.strip() for l in lines if len(l.strip()) > 0)
            excluded.update(lines)

    pd.set_option('display.max_colwidth', 200)

    # meh
    EXCLUDED_RE = re.compile('|'.join(e for e in excluded))

    def is_boring(row):
        # TODO filter reddit/hn somehow? or just sort to display in the bottom?
        ref = row.get('referrer', None)
        if ref is None:
            return False
        if ref == '-':
            return True
        if EXCLUDED_RE.search(ref):
            return True
        return False

    it = (row for row in iter_log(access_log, columns=['dt', 'referrer', 'url']) if not is_boring(row))
    # TODO log how many were filtered?

    from itertools import islice
    # it = islice(it, 0, 10000)

    df = pd.DataFrame(it)
    logger.info('read dataframe: %d lines', len(df))
    rt = df[~df['error'].notnull()]
    logger.info('after filtering errors: %d lines', len(df))

    # TODO dynamic sorting for pandas would be nice?
    rt = rt.sort_values(by=[
        # 'refferer',
        'dt',
    ], ascending=False)[[
        'dt',
        'url',
        'referrer',
    ]]
    gc = rt.groupby(['url', 'referrer']).count()
    gc = gc[gc['dt'] >= 5]
    gc = gc.sort_values(by=['dt'])
    return rt, gc


def main():
    import argparse
    p = argparse.ArgumentParser()
    p.add_argument('--access-log', type=Path, required=True)
    p.add_argument('--html', type=Path)
    p.add_argument('--exclude', type=Path)
    args = p.parse_args()
    html = args.html

    rt, gcount  = run(access_log=args.access_log, exclude=args.exclude)
    logger.info('rendering...')
    # TODO ugh. need some wort of iterative html rendering.. it takes 10% memeory as well
    if html is not None:
        with html.open('w') as fo:
            fo.write('<script src="https://cdn.jsdelivr.net/npm/sorttable@1.0.2/sorttable.min.js"></script>')

            refs = rt['referrer'].value_counts()

            # print(refs.quantile(axis='columns')) # 0.1))
            q90 = refs.quantile(0.90)
            print(f'q90: {q90}')
            # TODO FIXME percentile??
            def style(ser):
                if ser.name != 'referrer':
                    return ['' for _ in ser]
                else:
                    return ['font-weight:bold' if refs[val] < q90 else ''  for _, val in ser.items()]


            rts = rt.style.apply(style).render()
            # rts = rt.to_html()
            # rts = rts.replace('class="dataframe"', 'class="dataframe sortable"')
            rts = rts.replace('<table ', '<table border=1 class="dataframe sortable"')
            fo.write(rts)
            gc = gcount.to_html().replace('class="dataframe"', 'class="dataframe sortable"')
            fo.write(gc)
            rf = refs.to_frame()
            rf = rf[rf.referrer > q90]
            print(rf)
            fo.write(rf.to_html())
    else:
        print(rt)
        print(gcount)
    logger.info('total lines: %d', len(rt))


if __name__ == '__main__':
    main()
